import ccxt
import pandas_ta as ta
import asyncio
import logging
from aiohttp import ClientSession
import pandas as pd
import requests

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –∏ Telegram
api_key = 'your_api_key'  # –í–∞—à API –∫–ª—é—á
api_secret = 'your_api_secret'  # –í–∞—à API —Å–µ–∫—Ä–µ—Ç
telegram_bot_token = 'your_telegram_bot_token'  # –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
telegram_chat_id = 'your_telegram_chat_id'  # –í–∞—à chat ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Binance
exchange = ccxt.binance({
    'apiKey': api_key,
    'secret': api_secret,
    'enableRateLimit': True,
})

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
def send_telegram_message(message):
    url = f'https://api.telegram.org/bot{telegram_bot_token}/sendMessage'
    payload = {
        'chat_id': telegram_chat_id,
        'text': message
    }
    try:
        response = requests.post(url, data=payload)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async def get_market_data_async(symbol, session):
    try:
        ticker = await exchange.fetch_ticker(symbol)
        return ticker
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
def calculate_indicators(symbol, timeframe='5m', limit=100):
    ohlcv = exchange.fetch_ohlcv(symbol, timeframe=timeframe, limit=limit)
    df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    df['rsi'] = ta.rsi(df['close'], length=14)  # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä RSI
    df['ma_50'] = ta.sma(df['close'], length=50)  # 50-–ø–µ—Ä–∏–æ–¥–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
    df['ma_200'] = ta.sma(df['close'], length=200)  # 200-–ø–µ—Ä–∏–æ–¥–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
    df['bb_upper'], df['bb_middle'], df['bb_lower'] = ta.bbands(df['close'], length=20, std=2)  # Bollinger Bands

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    return df.iloc[-1]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
async def filter_markets_with_indicators(min_volume=1000000, max_spread=0.1, volatility_threshold=0.5, session=None):
    markets = exchange.load_markets()
    filtered_markets = []

    for symbol in markets:
        ticker = await get_market_data_async(symbol, session)
        if ticker:
            volume = ticker['quoteVolume']  # –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
            bid_ask_spread = ticker['ask'] - ticker['bid']  # –°–ø—Ä–µ–¥ Bid/Ask
            price_change = ticker['percentage']  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ % (–∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            indicators = calculate_indicators(symbol)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            if volume >= min_volume and bid_ask_spread <= max_spread and abs(price_change) >= volatility_threshold:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è RSI, MA –∏ Bollinger Bands
                if indicators['rsi'] < 30 and indicators['ma_50'] > indicators['ma_200'] and indicators['close'] < indicators['bb_lower']:
                    filtered_markets.append({
                        'symbol': symbol,
                        'volume': volume,
                        'bid_ask_spread': bid_ask_spread,
                        'price_change': price_change,
                        'rsi': indicators['rsi'],
                        'ma_50': indicators['ma_50'],
                        'ma_200': indicators['ma_200'],
                        'bb_lower': indicators['bb_lower'],
                    })
    
    return filtered_markets

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä—ã–Ω–∫–∞
async def scan_market():
    async with ClientSession() as session:
        while True:
            logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞...")
            filtered_markets = await filter_markets_with_indicators(min_volume=1000000, max_spread=0.1, volatility_threshold=0.5, session=session)

            if filtered_markets:
                for market in filtered_markets:
                    message = (
                        f"üöÄ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {market['symbol']}\n"
                        f"–û–±—ä–µ–º: {market['volume']}\n"
                        f"–°–ø—Ä–µ–¥: {market['bid_ask_spread']}\n"
                        f"–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {market['price_change']}%\n"
                        f"RSI: {market['rsi']}\n"
                        f"50 MA: {market['ma_50']}\n"
                        f"200 MA: {market['ma_200']}\n"
                        f"Bollinger Bands Lower: {market['bb_lower']}\n"
                    )
                    send_telegram_message(message)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –¥–ª—è {market['symbol']}")
            else:
                logger.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤.")

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            await asyncio.sleep(30)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–µ—Ä–∞
    asyncio.run(scan_market())
